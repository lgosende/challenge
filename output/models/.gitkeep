# Salary Prediction Challenge

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 2: Load Dataset
# Assuming the dataset is in CSV format and named 'salary_data.csv'
data = pd.read_csv('salary_data.csv')

# Step 3: Data Exploration
print(data.head())
print(data.info())
print(data.describe())

# Step 4: Data Preprocessing
# Check for missing values
print(data.isnull().sum())

# Fill or drop missing values as necessary
data.fillna(method='ffill', inplace=True)

# Step 5: Feature Engineering
# Optional Features: 2, 10, 11, and 16
# Assuming these features are named 'feature_2', 'feature_10', 'feature_11', 'feature_16'
# You may need to adjust the feature names based on your dataset

# Selecting features and target variable
features = data[['feature_2', 'feature_10', 'feature_11', 'feature_16']]
target = data['salary']  # Assuming 'salary' is the target variable

# Step 6: Model Training
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 7: Model Evaluation
# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Optional: Visualize the predictions vs actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Salary')
plt.ylabel('Predicted Salary')
plt.title('Actual vs Predicted Salary')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.show()

# Step 8: Conclusion
print("The model has been trained and evaluated. Further tuning and feature selection may improve performance.")